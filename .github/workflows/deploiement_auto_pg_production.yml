name: Deploy in make-open-data production data, Generate docs and save as artifact

on:
  workflow_run:
    workflows: ["Integration Test"]
    branches: [main]
    types:
      - completed

jobs:
  dbt:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
    - name: Check out repository code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.11.5

    - name: Create Python virtual environment
      run: python3 -m venv dbt-env

    - name: Activate virtual environment and install dependencies
      run: |
        source dbt-env/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set environment variables
      run: |
        source dbt-env/bin/activate
        echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> $GITHUB_ENV
        echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> $GITHUB_ENV
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV
        echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> $GITHUB_ENV
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> $GITHUB_ENV

    - name: Install PostGIS extensions
      run: |
        source dbt-env/bin/activate
        psql postgresql://${{  secrets.POSTGRES_USER  }}:${{  secrets.POSTGRES_PASSWORD  }}@${{  secrets.POSTGRES_HOST  }}:${{  secrets.POSTGRES_PORT  }}/${{  secrets.POSTGRES_DB  }} -c "CREATE EXTENSION IF NOT EXISTS postgis;"

    - name: Install unaccent extensions
      run: |
        source dbt-env/bin/activate
        psql postgresql://${{  secrets.POSTGRES_USER  }}:${{  secrets.POSTGRES_PASSWORD  }}@${{  secrets.POSTGRES_HOST  }}:${{  secrets.POSTGRES_PORT  }}/${{  secrets.POSTGRES_DB  }} -c "CREATE EXTENSION IF NOT EXISTS unaccent;"
    
    - name: delete "prep" schemas if exists
      run: |
        source dbt-env/bin/activate
        psql postgresql://${{  secrets.POSTGRES_USER  }}:${{  secrets.POSTGRES_PASSWORD  }}@${{  secrets.POSTGRES_HOST  }}:${{  secrets.POSTGRES_PORT  }}/${{  secrets.POSTGRES_DB  }} -c "DROP SCHEMA IF EXISTS prep CASCADE;"
    
    - name: delete "prepare" schemas if exists
      run: |
        source dbt-env/bin/activate
        psql postgresql://${{  secrets.POSTGRES_USER  }}:${{  secrets.POSTGRES_PASSWORD  }}@${{  secrets.POSTGRES_HOST  }}:${{  secrets.POSTGRES_PORT  }}/${{  secrets.POSTGRES_DB  }} -c "DROP SCHEMA IF EXISTS prepare CASCADE;"
    
    - name: delete "intermediaires" schemas if exists
      run: |
        source dbt-env/bin/activate
        psql postgresql://${{  secrets.POSTGRES_USER  }}:${{  secrets.POSTGRES_PASSWORD  }}@${{  secrets.POSTGRES_HOST  }}:${{  secrets.POSTGRES_PORT  }}/${{  secrets.POSTGRES_DB  }} -c "DROP SCHEMA IF EXISTS intermediaires CASCADE;"
      
    - name: Set DBT_PROFILES_DIR
      run: echo "DBT_PROFILES_DIR=." >> $GITHUB_ENV

    - name: check dbt project
      run: |
        source dbt-env/bin/activate
        dbt debug

    - name: Run dbt deps
      run: |
        source dbt-env/bin/activate
        dbt deps

    - name: Load data from storage to tables in DB
      run: |
        source dbt-env/bin/activate
        python -m load

  
    - name: Run dbt seed
      run: |
        source dbt-env/bin/activate
        dbt seed

    - name: Run dbt run
      run: |
        source dbt-env/bin/activate
        dbt run --target production
      
    - name: Generate dbt Documentation
      run: |
        source dbt-env/bin/activate
        dbt docs generate

    - name: Save Documentation as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: dbt-docs
        path: target/*

    - name: Checkout new repository
      uses: actions/checkout@v2
      with:
        repository: make-open-data/make-open-data-docs
        token: ${{ secrets.PAT }} 
        path: ./new-repo

    - name: Copy dbt docs to new repository
      run: |
        cp -r target/* new-repo/

    - name: Create timestamp file
      run: |
        echo "Documentation generated on: $(date)" > new-repo/timestamp.txt

    - name: Commit and push changes
      run: |
        cd new-repo
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Update dbt docs and timestamp"
        git push --force origin main
